- name: (NEUTRON) transfer neutrondb SQL script
  template: src=neutrondb.sql.j2 dest="~/neutrondb.sql" owner=root group=root mode=0600

- name: (NEUTRON) check if neutron db already exists
  command: 'mysql --user root --password={{mysql_pw}} -e "show databases;"'
  register: databases_list

- name: (NEUTRON) create neutron db
  shell: "cat ~/neutrondb.sql | mysql --user root --password={{mysql_pw}}"
  when: databases_list.stdout.find('neutron') == -1

- name: (NEUTRON) check if neutron user already exists
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 user list"
  register: openstack_users

- name: (NEUTRON) create neutron user
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 user create --password {{ keystone_admin_pw }} neutron"
  when: openstack_users.stdout.find('neutron') == -1

- name: (NEUTRON) check if neutron user is admin in service project
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 role list --project service --user neutron"
  register: neutron_perms

- name: (NEUTRON) add neutron user to service project
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 role add --project service --user neutron admin"
  when: neutron_perms.stdout.find('admin') == -1

- name: (NEUTRON) check if neutron service exists
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 service list"
  register: neutron_service

- name: (NEUTRON) create neutron service entity
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 service create --name neutron --description \"OpenStack Networking Service\" network"
  when: neutron_service.stdout.find('neutron') == -1

- name: (NEUTRON) check if neutron endpoint exists
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 endpoint list"
  register: neutron_endpoint

- name: (NEUTRON) create api endpoint
  command: "openstack --os-token {{ admin_token }} --os-url http://{{openstack_controller_node}}:35357/v2.0 endpoint create --publicurl http://{{openstack_controller_node}}:9696 --internalurl http://{{openstack_controller_node}}:9696 --adminurl http://{{openstack_controller_node}}:9696 --region RegionOne network"
  when: neutron_endpoint.stdout.find('network') == -1

- name: (NEUTRON) install neutron and associated packages
  apt: 
    name: "{{ item }}"
    state: present
    default_release: trusty-updates/kilo
  with_items:
    - neutron-server
    - neutron-plugin-ml2
    - python-neutronclient
    - neutron-plugin-linuxbridge-agent
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent

- name: (NEUTRON) replace neutron.conf
  template: src=neutron.conf.j2 dest="/etc/neutron/neutron.conf" owner=root group=root mode=0644

- name: (NEUTRON) replace ml2_conf.ini
  template: src=ml2_conf.ini.j2 dest="/etc/neutron/plugins/ml2/ml2_conf.ini" owner=root group=root mode=0644

- name: (NEUTRON) replace linuxbridge_agent.ini
  template: src=linuxbridge_agent.ini.j2 dest="/etc/neutron/plugins/ml2/linuxbridge_agent.ini" owner=root group=root mode=0644

- name: (NEUTRON) replace l3_agent.ini
  template: src=l3_agent.ini.j2 dest="/etc/neutron/l3_agent.ini" owner=root group=root mode=0644

- name: (NEUTRON) replace dhcp_agent.ini
  template: src=dhcp_agent.ini.j2 dest="/etc/neutron/dhcp_agent.ini" owner=root group=root mode=0644

- name: (NEUTRON) replace metadata_agent.ini
  template: src=metadata_agent.ini.j2 dest="/etc/neutron/metadata_agent.ini" owner=root group=root mode=0644

- name: (NEUTRON) populate network service database
  shell: "/bin/sh -c 'neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head' neutron"
  notify:
    - restart nova

- name: (NEUTRON) force neutron/nova-api restart
  meta: flush_handlers

- name: (NEUTRON) remove SQLite
  file:
    state: absent
    path: /var/lib/neutron/neutron.sqlite

