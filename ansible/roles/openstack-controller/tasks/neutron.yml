- name: (NEUTRON) transfer neutrondb SQL script
  template: src=neutrondb.sql.j2 dest="~/neutrondb.sql" owner=root group=root mode=0600

- name: (NEUTRON) check if neutron db already exists
  command: 'mysql --user root --password={{mysql_pw}} -e "show databases;"'
  register: databases_list

- name: (NEUTRON) create neutron db
  shell: "cat ~/neutrondb.sql | mysql --user root --password={{mysql_pw}}"
  when: databases_list.stdout.find('neutron') == -1

- name: (NEUTRON) check if neutron user already exists
  shell: "source /root/admin-openrc.sh && openstack user list"
  args:
    executable: "/bin/bash"
  register: openstack_users

- name: (NEUTRON) create neutron user
  shell: "source /root/admin-openrc.sh && openstack user create --domain default --password {{ keystone_admin_pw }} neutron"
  args:
    executable: "/bin/bash"
  when: openstack_users.stdout.find('neutron') == -1

- name: (NEUTRON) check if neutron user is admin in service project
  shell: "source /root/admin-openrc.sh && openstack role list --project service --user neutron"
  args:
    executable: "/bin/bash"
  register: neutron_perms

- name: (NEUTRON) add neutron user to service project
  shell: "source /root/admin-openrc.sh && openstack role add --project service --user neutron admin"
  args:
    executable: "/bin/bash"
  when: neutron_perms.stdout.find('admin') == -1

- name: (NEUTRON) check if neutron service exists
  shell: "source /root/admin-openrc.sh && openstack service list"
  args:
    executable: "/bin/bash"
  register: neutron_service

- name: (NEUTRON) create neutron service entity
  shell: "source /root/admin-openrc.sh && openstack service create --name neutron --description \"OpenStack Networking Service\" network"
  args:
    executable: "/bin/bash"
  when: neutron_service.stdout.find('neutron') == -1

- name: (NEUTRON) check if neutron endpoint exists
  shell: "source /root/admin-openrc.sh && openstack endpoint list"
  args:
    executable: "/bin/bash"
  register: neutron_endpoint

- name: (NEUTRON) create public api endpoint
  shell: "source /root/admin-openrc.sh && openstack endpoint create  --region RegionOne network public http://{{openstack_controller_node}}:9696"
  args:
    executable: "/bin/bash"
  when: neutron_endpoint.stdout.find('network') == -1

- name: (NEUTRON) create internal api endpoint
  shell: "source /root/admin-openrc.sh && openstack endpoint create  --region RegionOne network internal http://{{openstack_controller_node}}:9696"
  args:
    executable: "/bin/bash"
  when: neutron_endpoint.stdout.find('network') == -1

- name: (NEUTRON) create admin api endpoint
  shell: "source /root/admin-openrc.sh && openstack endpoint create  --region RegionOne network admin http://{{openstack_controller_node}}:9696"
  args:
    executable: "/bin/bash"
  when: neutron_endpoint.stdout.find('network') == -1

- name: (NEUTRON) install neutron and associated packages
  apt: 
    name: "{{ item }}"
    state: present
    default_release: xenial-updates/ocata
  with_items:
    - neutron-server
    - neutron-plugin-ml2
    - neutron-linuxbridge-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent

- name: (NEUTRON) replace neutron.conf
  template: src=neutron.conf.j2 dest="/etc/neutron/neutron.conf" owner=root group=root mode=0644

- name: (NEUTRON) replace ml2_conf.ini
  template: src=ml2_conf.ini.j2 dest="/etc/neutron/plugins/ml2/ml2_conf.ini" owner=root group=root mode=0644

- name: (NEUTRON) replace linuxbridge_agent.ini
  template: src=linuxbridge_agent.ini.j2 dest="/etc/neutron/plugins/ml2/linuxbridge_agent.ini" owner=root group=root mode=0644

- name: (NEUTRON) replace dhcp_agent.ini
  template: src=dhcp_agent.ini.j2 dest="/etc/neutron/dhcp_agent.ini" owner=root group=root mode=0644

- name: (NEUTRON) replace metadata_agent.ini
  template: src=metadata_agent.ini.j2 dest="/etc/neutron/metadata_agent.ini" owner=root group=root mode=0644

- name: (NEUTRON) populate network service database
  shell: "/bin/sh -c 'neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head' neutron"
  notify:
    - restart nova
    - restart neutron

- name: (NEUTRON) force neutron/nova-api restart
  meta: flush_handlers

- name: (NEUTRON) remove SQLite
  file:
    state: absent
    path: /var/lib/neutron/neutron.sqlite

