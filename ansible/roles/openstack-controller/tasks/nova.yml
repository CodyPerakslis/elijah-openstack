- name: (NOVA) transfer novadb SQL script
  template: src=novadb.sql.j2 dest="~/novadb.sql" owner=root group=root mode=0600

- name: (NOVA) check if nova db already exists
  command: 'mysql --user root --password={{mysql_pw}} -e "show databases;"'
  register: databases_list

- name: (NOVA) create nova db
  shell: "cat ~/novadb.sql | mysql --user root --password={{mysql_pw}}"
  when: databases_list.stdout.find('nova') == -1

- name: (NOVA) check if nova user already exists
  shell: "source /root/admin-openrc.sh && openstack user list"
  args:
    executable: "/bin/bash"
  register: openstack_users

- name: (NOVA) create nova user
  shell: "source /root/admin-openrc.sh && openstack user create --domain default --password {{ keystone_admin_pw }} nova"
  args:
    executable: "/bin/bash"
  when: openstack_users.stdout.find('nova') == -1

- name: (NOVA) check if nova user is admin in service project
  shell: "source /root/admin-openrc.sh && openstack role list --project service --user nova"
  args:
    executable: "/bin/bash"
  register: perms

- name: (NOVA) add nova user to service project
  shell: "source /root/admin-openrc.sh && openstack role add --project service --user nova admin"
  args:
    executable: "/bin/bash"
  when: perms.stdout.find('admin') == -1

- name: (NOVA) check if nova service exists
  shell: "source /root/admin-openrc.sh && openstack service list"
  args:
    executable: "/bin/bash"
  register: services

- name: (NOVA) create nova service entity
  shell: "source /root/admin-openrc.sh && openstack service create --name nova --description \"OpenStack Compute\" compute"
  args:
    executable: "/bin/bash"
  when: services.stdout.find('nova') == -1

- name: (NOVA) check if nova endpoint exists
  shell: "source /root/admin-openrc.sh && openstack endpoint list"
  args:
    executable: "/bin/bash"
  register: endpoints

- name: (NOVA) create nova public api endpoint
  shell: "source /root/admin-openrc.sh && openstack endpoint create --region RegionOne compute public 'http://{{openstack_controller_node}}:8774/v2.1/%(tenant_id)s'"
  args:
    executable: "/bin/bash"
  when: endpoints.stdout.find('compute') == -1  

- name: (NOVA) create nova internal api endpoint
  shell: "source /root/admin-openrc.sh && openstack endpoint create --region RegionOne compute internal 'http://{{openstack_controller_node}}:8774/v2.1/%(tenant_id)s'"
  args:
    executable: "/bin/bash"
  when: endpoints.stdout.find('compute') == -1

- name: (NOVA) create nova admin api endpoint
  shell: "source /root/admin-openrc.sh && openstack endpoint create --region RegionOne compute admin 'http://{{openstack_controller_node}}:8774/v2.1/%(tenant_id)s'"
  args:
    executable: "/bin/bash"
  when: endpoints.stdout.find('compute') == -1

- name: (NOVA) install nova-api and associated packages
  apt: 
    name: "{{ item }}"
    state: present
    default_release: xenial-updates/newton
  with_items:
    - nova-api
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-scheduler

#- name: (NOVA) install nova-network
#  apt:
#    name: "{{ item }}"
#    state: present
#    default_release: xenial-updates/newton
#  with_items:
#    - nova-network
#  #  - nova-api-metadata #This seems to get pulled in with the nova-api package
#  when: not neutron

- name: (NOVA) replace nova.conf
  template: src=nova.conf.j2 dest="/etc/nova/nova.conf" owner=root group=root mode=0644

#- name: (NOVA) replace api-paste.ini
#  copy: src=api-paste.ini dest="/etc/nova/api-paste.ini" owner=root group=root mode=0644
#
#- name: (NOVA) replace rootwrap.conf
#  copy: src=rootwrap.conf dest="/etc/nova/rootwrap.conf" owner=root group=root mode=0644
#
#- name: (NOVA) replace policy.json
#  copy: src=policy.json dest="/etc/nova/policy.json" owner=root group=root mode=0644

- name: (NOVA) populate nova service database
  shell: "/bin/sh -c 'nova-manage db sync' nova"
  notify:
    - restart nova

- name: (NOVA) populate nova_api database
  shell: "/bin/sh -c 'nova-manage api_db sync' nova"
  notify:
    - restart nova

- name: (NOVA) force nova services restart
  meta: flush_handlers

- name: (NOVA) remove SQLite
  file:
    state: absent
    path: /var/lib/nova/nova.sqlite

- name: (SINGLE_NIC) install dummy kernel module
  command: modprobe dummy
  when: one_nic

- name: (SINGLE_NIC) check if secondary NIC exists
  command: ip a
  when: one_nic
  register: virtual_nic

- name: (SINGLE_NIC) create virtual NIC
  command: ip link set promisc on name {{flat_iface}} dev dummy0
  when: one_nic and virtual_nic.stdout.find('{{flat_iface}}') == -1 

# - name: source admin creds
#   shell: "source ~/admin-openrc.sh"
#   args:
#     executable: /bin/bash
#   when: not neutron

# - name: check if initial nova network exists
#   command: "nova network-list"
#   register: network
#   when: not neutron

# - name: create initial nova network
#   command: "nova network-create vlan101 --fixed-range-v4 172.16.0.0/24 --fixed-cidr 172.16.0.0/24 --bridge br101 --bridge-interface {{flat_iface}} --dns1 8.8.4.4 --gateway   172.16.0.1 --vlan 101"
#   when: not neutron and network.stdout.find('vlan101') == -1
#   notify:
#     - restart nova-network

# - name: add openstack flat interface and enable promiscuous mode
#   template: src=openstack_if.cfg.j2 dest="/etc/network/interfaces.d/openstack_if.cfg" owner=root group=root mode=0644
#   notify:
#     - restart nova-network